# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import distribuidos_pb2 as distribuidos__pb2


class ArchivosStub(object):
    """definición del servicio para mensajes de audio
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.logging = channel.unary_unary(
                '/archivosRPC.Archivos/logging',
                request_serializer=distribuidos__pb2.autenticacion.SerializeToString,
                response_deserializer=distribuidos__pb2.respuesta.FromString,
                )
        self.create = channel.unary_unary(
                '/archivosRPC.Archivos/create',
                request_serializer=distribuidos__pb2.peticion.SerializeToString,
                response_deserializer=distribuidos__pb2.respuesta.FromString,
                )
        self.preread = channel.unary_unary(
                '/archivosRPC.Archivos/preread',
                request_serializer=distribuidos__pb2.peticion.SerializeToString,
                response_deserializer=distribuidos__pb2.respuesta.FromString,
                )
        self.read = channel.unary_stream(
                '/archivosRPC.Archivos/read',
                request_serializer=distribuidos__pb2.peticion.SerializeToString,
                response_deserializer=distribuidos__pb2.peticionDatos.FromString,
                )
        self.prewrite = channel.unary_unary(
                '/archivosRPC.Archivos/prewrite',
                request_serializer=distribuidos__pb2.peticionEscritura.SerializeToString,
                response_deserializer=distribuidos__pb2.respuesta.FromString,
                )
        self.write = channel.stream_unary(
                '/archivosRPC.Archivos/write',
                request_serializer=distribuidos__pb2.peticionDatos.SerializeToString,
                response_deserializer=distribuidos__pb2.respuesta.FromString,
                )
        self.rename = channel.unary_unary(
                '/archivosRPC.Archivos/rename',
                request_serializer=distribuidos__pb2.renombre.SerializeToString,
                response_deserializer=distribuidos__pb2.respuesta.FromString,
                )
        self.remove = channel.unary_unary(
                '/archivosRPC.Archivos/remove',
                request_serializer=distribuidos__pb2.peticion.SerializeToString,
                response_deserializer=distribuidos__pb2.respuesta.FromString,
                )
        self.mkdir = channel.unary_unary(
                '/archivosRPC.Archivos/mkdir',
                request_serializer=distribuidos__pb2.peticion.SerializeToString,
                response_deserializer=distribuidos__pb2.respuesta.FromString,
                )
        self.rmdir = channel.unary_unary(
                '/archivosRPC.Archivos/rmdir',
                request_serializer=distribuidos__pb2.peticion.SerializeToString,
                response_deserializer=distribuidos__pb2.respuesta.FromString,
                )
        self.readdir = channel.unary_stream(
                '/archivosRPC.Archivos/readdir',
                request_serializer=distribuidos__pb2.peticion.SerializeToString,
                response_deserializer=distribuidos__pb2.lista.FromString,
                )
        self.cd = channel.unary_unary(
                '/archivosRPC.Archivos/cd',
                request_serializer=distribuidos__pb2.peticion.SerializeToString,
                response_deserializer=distribuidos__pb2.respuesta.FromString,
                )


class ArchivosServicer(object):
    """definición del servicio para mensajes de audio
    """

    def logging(self, request, context):
        """Inicio de sesión
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create(self, request, context):
        """crearArchivo
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def preread(self, request, context):
        """Solicitar confirmacion que existe archivo para lectura
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def read(self, request, context):
        """Leer datos del archivo
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def prewrite(self, request, context):
        """Solicitar confirmacion que existe archivo para escritura
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def write(self, request_iterator, context):
        """Escribir datos en archivo
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rename(self, request, context):
        """Renombrar archivo
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def remove(self, request, context):
        """Borrar un archivo
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mkdir(self, request, context):
        """Crear carpeta
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rmdir(self, request, context):
        """Borrar carpeta
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def readdir(self, request, context):
        """Listar carpeta
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cd(self, request, context):
        """Cambiar carpeta
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ArchivosServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'logging': grpc.unary_unary_rpc_method_handler(
                    servicer.logging,
                    request_deserializer=distribuidos__pb2.autenticacion.FromString,
                    response_serializer=distribuidos__pb2.respuesta.SerializeToString,
            ),
            'create': grpc.unary_unary_rpc_method_handler(
                    servicer.create,
                    request_deserializer=distribuidos__pb2.peticion.FromString,
                    response_serializer=distribuidos__pb2.respuesta.SerializeToString,
            ),
            'preread': grpc.unary_unary_rpc_method_handler(
                    servicer.preread,
                    request_deserializer=distribuidos__pb2.peticion.FromString,
                    response_serializer=distribuidos__pb2.respuesta.SerializeToString,
            ),
            'read': grpc.unary_stream_rpc_method_handler(
                    servicer.read,
                    request_deserializer=distribuidos__pb2.peticion.FromString,
                    response_serializer=distribuidos__pb2.peticionDatos.SerializeToString,
            ),
            'prewrite': grpc.unary_unary_rpc_method_handler(
                    servicer.prewrite,
                    request_deserializer=distribuidos__pb2.peticionEscritura.FromString,
                    response_serializer=distribuidos__pb2.respuesta.SerializeToString,
            ),
            'write': grpc.stream_unary_rpc_method_handler(
                    servicer.write,
                    request_deserializer=distribuidos__pb2.peticionDatos.FromString,
                    response_serializer=distribuidos__pb2.respuesta.SerializeToString,
            ),
            'rename': grpc.unary_unary_rpc_method_handler(
                    servicer.rename,
                    request_deserializer=distribuidos__pb2.renombre.FromString,
                    response_serializer=distribuidos__pb2.respuesta.SerializeToString,
            ),
            'remove': grpc.unary_unary_rpc_method_handler(
                    servicer.remove,
                    request_deserializer=distribuidos__pb2.peticion.FromString,
                    response_serializer=distribuidos__pb2.respuesta.SerializeToString,
            ),
            'mkdir': grpc.unary_unary_rpc_method_handler(
                    servicer.mkdir,
                    request_deserializer=distribuidos__pb2.peticion.FromString,
                    response_serializer=distribuidos__pb2.respuesta.SerializeToString,
            ),
            'rmdir': grpc.unary_unary_rpc_method_handler(
                    servicer.rmdir,
                    request_deserializer=distribuidos__pb2.peticion.FromString,
                    response_serializer=distribuidos__pb2.respuesta.SerializeToString,
            ),
            'readdir': grpc.unary_stream_rpc_method_handler(
                    servicer.readdir,
                    request_deserializer=distribuidos__pb2.peticion.FromString,
                    response_serializer=distribuidos__pb2.lista.SerializeToString,
            ),
            'cd': grpc.unary_unary_rpc_method_handler(
                    servicer.cd,
                    request_deserializer=distribuidos__pb2.peticion.FromString,
                    response_serializer=distribuidos__pb2.respuesta.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'archivosRPC.Archivos', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Archivos(object):
    """definición del servicio para mensajes de audio
    """

    @staticmethod
    def logging(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/archivosRPC.Archivos/logging',
            distribuidos__pb2.autenticacion.SerializeToString,
            distribuidos__pb2.respuesta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/archivosRPC.Archivos/create',
            distribuidos__pb2.peticion.SerializeToString,
            distribuidos__pb2.respuesta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def preread(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/archivosRPC.Archivos/preread',
            distribuidos__pb2.peticion.SerializeToString,
            distribuidos__pb2.respuesta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/archivosRPC.Archivos/read',
            distribuidos__pb2.peticion.SerializeToString,
            distribuidos__pb2.peticionDatos.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def prewrite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/archivosRPC.Archivos/prewrite',
            distribuidos__pb2.peticionEscritura.SerializeToString,
            distribuidos__pb2.respuesta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def write(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/archivosRPC.Archivos/write',
            distribuidos__pb2.peticionDatos.SerializeToString,
            distribuidos__pb2.respuesta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rename(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/archivosRPC.Archivos/rename',
            distribuidos__pb2.renombre.SerializeToString,
            distribuidos__pb2.respuesta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def remove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/archivosRPC.Archivos/remove',
            distribuidos__pb2.peticion.SerializeToString,
            distribuidos__pb2.respuesta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mkdir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/archivosRPC.Archivos/mkdir',
            distribuidos__pb2.peticion.SerializeToString,
            distribuidos__pb2.respuesta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rmdir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/archivosRPC.Archivos/rmdir',
            distribuidos__pb2.peticion.SerializeToString,
            distribuidos__pb2.respuesta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def readdir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/archivosRPC.Archivos/readdir',
            distribuidos__pb2.peticion.SerializeToString,
            distribuidos__pb2.lista.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/archivosRPC.Archivos/cd',
            distribuidos__pb2.peticion.SerializeToString,
            distribuidos__pb2.respuesta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
