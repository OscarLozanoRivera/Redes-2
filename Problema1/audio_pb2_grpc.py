# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import audio_pb2 as audio__pb2


class AudioStub(object):
    """definici贸n del servicio para mensajes de audio
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.iniciarJuego = channel.unary_unary(
                '/audioRPC.Audio/iniciarJuego',
                request_serializer=audio__pb2.nombre.SerializeToString,
                response_deserializer=audio__pb2.lista.FromString,
                )
        self.terminarJuego = channel.unary_unary(
                '/audioRPC.Audio/terminarJuego',
                request_serializer=audio__pb2.nombre.SerializeToString,
                response_deserializer=audio__pb2.nombre.FromString,
                )
        self.actualizarJuego = channel.unary_unary(
                '/audioRPC.Audio/actualizarJuego',
                request_serializer=audio__pb2.lista.SerializeToString,
                response_deserializer=audio__pb2.respuestaPersonaje.FromString,
                )
        self.recibirAudio = channel.stream_unary(
                '/audioRPC.Audio/recibirAudio',
                request_serializer=audio__pb2.trozosAudio.SerializeToString,
                response_deserializer=audio__pb2.respuestaPersonaje.FromString,
                )


class AudioServicer(object):
    """definici贸n del servicio para mensajes de audio
    """

    def iniciarJuego(self, request, context):
        """Se incluye en lista de espera
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def terminarJuego(self, request, context):
        """Avisar que termina la sesi贸n
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def actualizarJuego(self, request, context):
        """Actualiza juego y pide permiso para enviar audio
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def recibirAudio(self, request_iterator, context):
        """Recibe el audio en trozos y regresa una respuesta a la pregunta hecha por voz
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AudioServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'iniciarJuego': grpc.unary_unary_rpc_method_handler(
                    servicer.iniciarJuego,
                    request_deserializer=audio__pb2.nombre.FromString,
                    response_serializer=audio__pb2.lista.SerializeToString,
            ),
            'terminarJuego': grpc.unary_unary_rpc_method_handler(
                    servicer.terminarJuego,
                    request_deserializer=audio__pb2.nombre.FromString,
                    response_serializer=audio__pb2.nombre.SerializeToString,
            ),
            'actualizarJuego': grpc.unary_unary_rpc_method_handler(
                    servicer.actualizarJuego,
                    request_deserializer=audio__pb2.lista.FromString,
                    response_serializer=audio__pb2.respuestaPersonaje.SerializeToString,
            ),
            'recibirAudio': grpc.stream_unary_rpc_method_handler(
                    servicer.recibirAudio,
                    request_deserializer=audio__pb2.trozosAudio.FromString,
                    response_serializer=audio__pb2.respuestaPersonaje.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'audioRPC.Audio', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Audio(object):
    """definici贸n del servicio para mensajes de audio
    """

    @staticmethod
    def iniciarJuego(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/audioRPC.Audio/iniciarJuego',
            audio__pb2.nombre.SerializeToString,
            audio__pb2.lista.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def terminarJuego(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/audioRPC.Audio/terminarJuego',
            audio__pb2.nombre.SerializeToString,
            audio__pb2.nombre.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def actualizarJuego(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/audioRPC.Audio/actualizarJuego',
            audio__pb2.lista.SerializeToString,
            audio__pb2.respuestaPersonaje.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def recibirAudio(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/audioRPC.Audio/recibirAudio',
            audio__pb2.trozosAudio.SerializeToString,
            audio__pb2.respuestaPersonaje.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
